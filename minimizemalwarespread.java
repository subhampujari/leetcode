class Solution {
    
    // Union-Find (Disjoint Set Union) class
    class UnionFind {
        int[] parent;
        int[] size;
        
        // Constructor to initialize Union-Find structure
        public UnionFind(int n) {
            parent = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        
        // Find the root of the node
        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);  // Path compression
            }
            return parent[x];
        }
        
        // Union two sets by size
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            
            if (rootX != rootY) {
                // Union by size
                if (size[rootX] < size[rootY]) {
                    parent[rootX] = rootY;
                    size[rootY] += size[rootX];
                } else {
                    parent[rootY] = rootX;
                    size[rootX] += size[rootY];
                }
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        
        // Step 1: Use Union-Find to group nodes based on the adjacency matrix
        UnionFind uf = new UnionFind(n);
        
        // Union connected nodes
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        // A node is critical if its removal reduces the number of infected nodes
        int[] infectedCount = new int[n]; // This stores the count of infected nodes per component
        
        // Step 4: Count how many nodes are initially infected in each component
        for (int node : initial) {
            int root = uf.find(node);
            infectedCount[root]++;
        }
        
        // Step 5: Simulate the effect of removing each node from the initial list
        int maxSize = -1; // Track the largest component size after removal
        int resultNode = -1; // Node that minimizes the infected nodes after removal

        // For each infected node, try removing it and compute the result
        for (int node : initial) {
            int root = uf.find(node);
            // If only one initially infected node is in this component, removing it reduces the infection size
            if (infectedCount[root] == 1) {
                if (uf.size[root] >= maxSize) {
                    if (maxSize == uf.size[root]) {
                        resultNode = Math.min(resultNode, node);
                    } else {
                        resultNode = node;
                    }
                    maxSize = uf.size[root];
                }
            }
        }
        
        // If no critical node removal was found, return the smallest index from the initial list
        if (resultNode == -1) {
            int min = n + 1;
            for (int e : initial) {
                min = Math.min(min, e);
            }
            return min;
        }
        
        return resultNode;
    }
}